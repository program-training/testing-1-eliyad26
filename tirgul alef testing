import { describe, expect, test } from "vitest";
import {
  lenstr,
  isPoly,
  sortUp,
  sqrt,
  sumnums,
  fetchUserData,
  fibonacii,
} from "./tirgul_alef";

describe("testing", () => {
  //1
  test("lenstr", () => {
    const str1 = "aaaa";

    const result = lenstr(str1);

    expect(result).toBe(4);
  });
  //2
  test("isPoly", () => {
    const str1 = "aaa";
    const result = isPoly(str1);
    // expect(result).toBeFalsy();
    expect(result).toBeTruthy();
  });
  //3
  test("sortUp", () => {
    const nums = [1, 4, 3, 5];
    const result = sortUp(nums);
    expect(result).toEqual([1, 3, 4, 5]);
  });
  //4
  test("sqrt", () => {
    const num = 9;
    const result = sqrt(num);
    expect(result).toBe(3);
    expect(() => sqrt(-8)).toThrow();
  });

  //5
  test("sumnums", () => {
    const nums = [1, 2, 1];
    const result = sumnums(nums);
    expect(result).toBe(4);
  });
  test("sumnums", () => {
    const nums = [1, 2, 1];
    const result = sumnums(nums);
    expect(result).toBeGreaterThan(3);
  });
  //6
  test("fetchUserData", async () => {
    const user4 = {
      id: 4,
      name: "Patricia Lebsack",
      username: "Karianne",
      email: "Julianne.OConner@kory.org",
      address: {
        street: "Hoeger Mall",
        suite: "Apt. 692",
        city: "South Elvis",
        zipcode: "53919-4257",
        geo: {
          lat: "29.4572",
          lng: "-164.2990",
        },
      },
      phone: "493-170-9623 x156",
      website: "kale.biz",
      company: {
        name: "Robel-Corkery",
        catchPhrase: "Multi-tiered zero tolerance productivity",
        bs: "transition cutting-edge web services",
      },
    };
    const result = await fetchUserData(4);
    expect(result).toEqual(user4);
    expect(async () => await fetchUserData(12)).rejects.toThrow();
  });
  //7
  test("fibonaciierror", () => {
    const nums = [1, 4, 3, 5, 432, 2];
    expect(() => fibonacii(nums)).toThrow();
  });

  test("fibonacii", () => {
    const nums = [1, 1, 2, 3, 5, 8];

    const result = fibonacii(nums);
    expect(result).toBe(13);
  });
});


